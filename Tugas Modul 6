#include <iostream>
#include <cmath>

class Calculator {
private:
    int* number;
    int size;

public:
    Calculator(int size) {
        this->size = size;
        number = new int[size];
    }

    virtual ~Calculator() {
        delete[] number;
    }

    void setNumber(int index, int value) {
        if (index >= 0 && index < size) {
            number[index] = value;
        }
    }

    int getNumber(int index) {
        if (index >= 0 && index < size) {
            return number[index];
        }
        return 0;
    }

    void clear() {
        for (int i = 0; i < size; i++) {
            number[i] = 0;
        }
    }

    virtual int calculate() = 0;
};

class BasicCalculator : public Calculator {
public:
    BasicCalculator(int size) : Calculator(size) {}

    int calculate() override {

        int result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result += getNumber(i);
        }
        return result;
    }

    int add() {
        return calculate();
    }

    int subtract() {

        int result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result -= getNumber(i);
        }
        return result;
    }

    int multiply() {

        int result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result *= getNumber(i);
        }
        return result;
    }

    int divide() {

        int result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result /= getNumber(i);
        }
        return result;
    }
};

class ScientificCalculator : public Calculator {
public:
    ScientificCalculator(int size) : Calculator(size) {}

    int calculate() override {

        int result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result += getNumber(i);
        }
        return result;
    }

    double squareRoot() {

        return sqrt(getNumber(0));
    }

    double exponentiation() {

        double result = getNumber(0);
        for (int i = 1; i < 5; i++) {
            result = pow(result, getNumber(i));
        }
        return result;
    }

    int factorial() {

        int result = 1;
        for (int i = 1; i <= getNumber(0); i++) {
            result *= i;
        }
        return result;
    }
};

int main() {
    Calculator* calculator = new BasicCalculator(5);
    for (int i = 0; i < 5; i++) {
        calculator->setNumber(i, i + 1);
    }

    int sum = calculator->calculate();
    std::cout << "Sum: " << sum << std::endl;

    int addition = static_cast<BasicCalculator*>(calculator)->add();
    std::cout << "Addition: " << addition << std::endl;

    int subtraction = static_cast<BasicCalculator*>(calculator)->subtract();
    std::cout << "Subtraction: " << subtraction << std::endl;

    int multiplication = static_cast<BasicCalculator*>(calculator)->multiply();
    std::cout << "Multiplication: " << multiplication << std::endl;

    int division = static_cast<BasicCalculator*>(calculator)->divide();
    std::cout << "Divide: " << division << std::endl;

    calculator->clear(); // Clear the numbers

    delete calculator;

    calculator = new ScientificCalculator(3);
    calculator->setNumber(0, 4);
    calculator->setNumber(1, 2);
    calculator->setNumber(2, 3);

    double squareRoot = static_cast<ScientificCalculator*>(calculator)->squareRoot();
    std::cout << "Square Root: " << squareRoot << std::endl;

    double exponentiation = static_cast<ScientificCalculator*>(calculator)->exponentiation();
    std::cout << "Exponentiation: " << exponentiation << std::endl;

    int factorial = static_cast<ScientificCalculator*>(calculator)->factorial();
    std::cout << "Factorial: " << factorial << std::endl;

    calculator->clear(); // Clear the numbers

    delete calculator;

    return 0;
}
